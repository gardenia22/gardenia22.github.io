<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Leetcode on Nanshu&#39;s blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://nanshu.wang/tags/leetcode/</link>
    <language>en-us</language>
    <author>Nanshu Wang</author>
    <copyright>Copyright (c) 2015, Nanshu Wang; all rights reserved.</copyright>
    <updated>Tue, 11 Aug 2015 00:00:00 UTC</updated>
    
    <item>
      <title>最长回文子串Longest palindromic substring的四种算法</title>
      <link>http://nanshu.wang/post/2015-08-11</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 UTC</pubDate>
      <author>Nanshu Wang</author>
      <guid>http://nanshu.wang/post/2015-08-11</guid>
      <description>

&lt;h2 id=&#34;题目描述:3c5494d961990eaf70786ecbf6c7dfc4&#34;&gt;题目描述：&lt;/h2&gt;

&lt;p&gt;给定字符串$S$，求其最长的回文子串。&lt;/p&gt;

&lt;p&gt;Leetcode:&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-substring/&#34;&gt;https://leetcode.com/problems/longest-palindromic-substring/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面给出四种算法思路，分别是朴素枚举、动态规划、中心拓展和Manacher算法。&lt;/p&gt;

&lt;p&gt;其中，Manacher算法复杂度为$O(n)$&lt;/p&gt;

&lt;h2 id=&#34;1-朴素枚举:3c5494d961990eaf70786ecbf6c7dfc4&#34;&gt;1. 朴素枚举&lt;/h2&gt;

&lt;p&gt;时间复杂度：$O(n^3)$&lt;/p&gt;

&lt;p&gt;枚举$S$的所有子串，判断子串是否为回文字符串，取其中最长子串。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def palindrome1(s):
    n = len(s)
    ans = 0
    for i in range(n):
        for j in range(i+1,n):
            if j-i+1&amp;gt;ans and s[i:j]==s[j:i:-1]:
                ans = j-i+1
    return ans               
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-动态规划:3c5494d961990eaf70786ecbf6c7dfc4&#34;&gt;2. 动态规划&lt;/h2&gt;

&lt;p&gt;时间复杂度：$O(n^2)$&lt;/p&gt;

&lt;p&gt;注意到枚举子串并判断时产生了大量的重复判断，用状态$dp[i][j]$记录子串$s[i:j]$是否为回文字符串。枚举子串时按照子串长度的顺序进行枚举，若$s[i+1:j-1]$是回文串并且$s[i]==s[j]$，那么$s[i:j]$也是回文串。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def palindrome2(s):
    n = len(s)
    dp = [[False for i in range(n)]for i in range(n)]
    for i in range(n):
        dp[i][i] = True
        dp[i][i-1] = True
    ans = 0
    for l in range(2,n+1):
        for i in range(n-l+1):
            j = i+l-1
            if dp[i+1][j-1] and s[i]==s[j]:
                dp[i][j] = True
                ans = l
    return ans    
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-中心拓展:3c5494d961990eaf70786ecbf6c7dfc4&#34;&gt;3. 中心拓展&lt;/h2&gt;

&lt;p&gt;时间复杂度：$O(n^2)$&lt;/p&gt;

&lt;p&gt;回文串都是以中心对称的，因此可以枚举回文串的中心，再从中心向两边拓展找出当前中心的最长子串。注意中心可以是字符，也可以是字符之间的间隙，为了方便起见，将字符串的字符之间都插入一个特殊符号便于处理，例如&amp;rdquo;ABC&amp;rdquo;变为&amp;rdquo;&lt;em&gt;A_B_C&lt;/em&gt;&amp;ldquo;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def palindrome3(s):
    s = &amp;quot;&amp;quot;.join(map(lambda x:&#39;_&#39;+x,s))+&#39;_&#39;
    n = len(s)
    ans = 0
    for i in range(n):
        l = r = i
        while l-1 &amp;gt;= 0 and r+1 &amp;lt; n and s[l-1]==s[r+1]:
            l -= 1
            r += 1
        ans = max(ans,r-l+1)
    return ans/2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-manacher算法:3c5494d961990eaf70786ecbf6c7dfc4&#34;&gt;4. Manacher算法&lt;/h2&gt;

&lt;p&gt;时间复杂度：$O(n)$&lt;/p&gt;

&lt;p&gt;Manacher算法是由Manacher在1975年提出的，算法的思想也是从左到右依次计算以当前字符为中心的最大回文串，但在计算时利用了回文子串的特殊性质来减少计算量。&lt;/p&gt;

&lt;p&gt;假设已知$S$的两个回文子串$S1$，$S2$，其回文中心字符的位置分别为$c1$，$c2$（$c1$ &amp;lt; $c2$，$c1$在$c2$的左侧），并且$S1$又是$S2$的子串。由于$S2$是回文串，因此$S2$中的任一子串在以$c2$为对称轴的右侧也有完全相同的子串。根据这一性质，存在$S3$为$S2$的子串，并且$S3$和$S1$完全相同并以$c2$为对称轴对称。那么$S3$也同样是回文串，其对称中心为$2*c2-c1$。并且若$S1$不是$S2$的前缀，或者$S2$是$S$的后缀的情况下，以$2*c2-c1$对称的最大回文子串可以直接确定为在$S2$中与$S1$完全对称的子串。&lt;/p&gt;

&lt;p&gt;因此，当确定了当前中心$c1$的最大回文子串$S1$后，设其长度$l1$，向右去找在$S1$内可以直接确定的最大回文子串的对称中心，这些对称中心则可以直接跳过而不去计算。只有当回文串不能直接确定时，才需要进一步比较确定该中心的最大回文子串。&lt;/p&gt;

&lt;p&gt;完整的算法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#length[i] 表示以第i个字符为中心的最大回文串长度
1. 当前中心c = 1
2. 循环以下步骤直到c不合法：
    a. 从两端同时扩展得到以c为中心的最长回文子串，其长度为l,length[c] = l
    b. i = 1,2,..;当length[c-i]所代表的子串是length[c]的子串，且不为length[c]的前缀或者length[c]是原字符串的后缀时，length[c+i]可以直接确定为length[c-i]。即根据length[c-1],length[c-2]...的值来更新可以确定的最长回文子串长度length[c+1],length[c+2]...直到不能确定其回文长度的中心为c+i
    c. 令当前中心c = c+i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样也需要在字符中插入特殊字符在处理中心为间隙的情况。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def palindrome4(s):
    s = &amp;quot;&amp;quot;.join(map(lambda x:&#39;_&#39;+x,s))+&#39;_&#39;
    n = len(s)
    length = [0 for i in range(n)]
    c = 0
    while c &amp;lt; n:
        l = c-length[c]/2
        r = c+length[c]/2
        while l-1 &amp;gt;= 0 and r+1 &amp;lt; n and s[l-1]==s[r+1]:
            l -= 1
            r += 1
        length[c] = r-l+1
        i = 1
        # 能确定以c+i为中心的最长子串的长度
        while c-i &amp;gt;= 0 and c+i &amp;lt; n and c-i-length[c-i]/2&amp;gt;c-length[c]/2 or\
             (c-i-length[c-i]/2==c-length[c]/2 and c+length[c]/2==n-1):
            length[c+i] = length[c-i]
            i += 1
        # 不能确定以c+i为中心的最长子串的长度，但能确定其至少大于length[c-i]
        if c-i &amp;gt;= 0 and c+i &amp;lt; n and c-i-length[c-i]/2==c-length[c]/2:
            length[c+i] = length[c-i]
        c = c + i
    return max(length)/2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;时间复杂度证明：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;考虑内循环中字符的总比较次数，每次比较的右端字符都在前次比较过的右端字符的后面，也就是说右端字符并没有重复，而右端字符最多有$n$个位置，字符比较次数最多为$n$次&lt;/li&gt;
&lt;li&gt;考虑内循环中确定$length[c+i]$的次数，因为$length$最多有$n$个值，确定$length[c+i]$不会重复访问，因此确定$length[c+i]$最多为$n$次。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;综上，时间复杂度为$O(n)$&lt;/p&gt;

&lt;h1 id=&#34;参考:3c5494d961990eaf70786ecbf6c7dfc4&#34;&gt;参考&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/w/index.php?title=Longest_palindromic_substring&amp;amp;action=edit&#34;&gt;Editing Longest palindromic substring - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.akalin.cx/longest-palindrome-linear-time&#34;&gt;Finding the Longest Palindromic Substring in Linear Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/linulysses/article/details/5634104&#34;&gt;Longest Palindrome (最长回文子串) - 夜鱼的专栏 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
